!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(1),n(5)},function(e,t,n){var a=n(2);"string"==typeof a&&(a=[[e.i,a,""]]);var r={insert:"head",singleton:!1};n(4)(a,r);a.locals&&(e.exports=a.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"*{margin:0;padding:0;font-family:'Roboto', sans-serif;font-size:24px;user-select:none}body{display:flex;flex-direction:column;align-items:center;width:85%;margin:0 auto}body .text_area{width:80%;height:400px}body .keyboard{display:flex;flex-direction:column;align-items:center;width:100%}body .keyboard .row{display:flex;justify-content:center;width:80%}.key{display:flex;justify-content:center;align-items:center;margin:9px 7px;width:50px;height:45px;border-radius:7px;font-size:24px;transition:.2s all ease;background:#6094f3}.key:hover{cursor:pointer;background:#346bd1}.active_key{border-radius:20px;background:#346bd1}.Backspace,.ShiftLeft{width:120px}.Tab,.ControlLeft{width:85px}.Backslash{width:85px}.CapsLock{width:110px}.Enter{width:125px}.ShiftRight{width:115px}.Space{width:405px}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",a=e[3];if(!a)return n;if(t&&"function"==typeof btoa){var r=(i=a,c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(l," */")),o=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot).concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var i,c,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var a={},r=0;r<this.length;r++){var o=this[r][0];null!=o&&(a[o]=!0)}for(var i=0;i<e.length;i++){var c=e[i];null!=c[0]&&a[c[0]]||(n&&!c[2]?c[2]=n:n&&(c[2]="(".concat(c[2],") and (").concat(n,")")),t.push(c))}},t}},function(e,t,n){"use strict";var a,r={},o=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function c(e,t){for(var n=[],a={},r=0;r<e.length;r++){var o=e[r],i=t.base?o[0]+t.base:o[0],c={css:o[1],media:o[2],sourceMap:o[3]};a[i]?a[i].parts.push(c):n.push(a[i]={id:i,parts:[c]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var a=e[n],o=r[a.id],i=0;if(o){for(o.refs++;i<o.parts.length;i++)o.parts[i](a.parts[i]);for(;i<a.parts.length;i++)o.parts.push(g(a.parts[i],t))}else{for(var c=[];i<a.parts.length;i++)c.push(g(a.parts[i],t));r[a.id]={id:a.id,refs:1,parts:c}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var a=n.nc;a&&(e.attributes.nonce=a)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var r=i(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,a){var r=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var o=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var a=n.css,r=n.media,o=n.sourceMap;if(r&&e.setAttribute("media",r),o&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var h=null,y=0;function g(e,t){var n,a,r;if(t.singleton){var o=y++;n=h||(h=s(t)),a=f.bind(null,n,o,!1),r=f.bind(null,n,o,!0)}else n=s(t),a=p.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e,t);return l(n,t),function(e){for(var a=[],o=0;o<n.length;o++){var i=n[o],s=r[i.id];s&&(s.refs--,a.push(s))}e&&l(c(e,t),t);for(var u=0;u<a.length;u++){var d=a[u];if(0===d.refs){for(var f=0;f<d.parts.length;f++)d.parts[f]();delete r[d.id]}}}}},function(e,t){const n=1,a=3,r=[["Backquote","`","~","ё","Ё"],["Digit1","1","!","1","!"],["Digit2","2","@","2",'"'],["Digit3","3","#","3","№"],["Digit4","4","$","4",";"],["Digit5","5","%","5","%"],["Digit6","6","^","6",":"],["Digit7","7","&","7","?"],["Digit8","8","*","8","*"],["Digit9","9","(","9","("],["Digit0","0",")","0",")"],["Minus","-","_","-","_"],["Equal","=","+","=","+"],["Backspace","Backspace","Backspace","Backspace","Backspace"]],o=[["Tab","Tab","Tab","Tab","Tab"],["KeyQ","q","Q","й","Й"],["KeyW","w","W","ц","Ц"],["KeyE","e","E","у","У"],["KeyR","r","R","к","К"],["KeyT","t","T","е","Е"],["KeyY","y","Y","н","Н"],["KeyU","u","U","г","Г"],["KeyI","i","I","ш","Ш"],["KeyO","o","O","щ","Щ"],["KeyP","p","P","з","З"],["BracketLeft","[","{","х","Х"],["BracketRight","]","}","ъ","Ъ"],["Backslash","\\","|","\\","/"]],i=[["CapsLock","CapsLock","CapsLock","CapsLock","CapsLock"],["KeyA","a","A","ф","Ф"],["KeyS","s","S","ы","Ы"],["KeyD","d","D","в","В"],["KeyF","f","F","а","А"],["KeyG","g","G","п","П"],["KeyH","h","H","р","Р"],["KeyJ","j","J","о","О"],["KeyK","k","K","л","Л"],["KeyL","l","L","д","Д"],["Semicolon",";",":","ж","Ж"],["Quotes","'",'"',"э","Э"],["Enter","Enter","Enter","Enter","Enter"]],c=[["ShiftLeft Shift","Shift","Shift","Shift","Shift"],["KeyZ","z","Z","я","Я"],["KeyX","x","X","ч","Ч"],["KeyC","c","C","с","С"],["KeyV","v","V","м","М"],["KeyB","b","B","и","И"],["KeyN","n","N","т","Т"],["KeyM","m","M","ь","Ь"],["Comma",",","<","б","Б"],["Period",".",">","ю","Ю"],["Slash","/","?",".",","],["ArrowUp","↑","↑","↑","↑"],["ShiftRight Shift","Shift","Shift","Shift","Shift"]],l=[r,o,i,c,[["ControlLeft Control","Ctrl","Ctrl","Ctrl","Ctrl"],["MetaLeft","Win","Win","Win","Win"],["AltLeft Alt","Alt","Alt","Alt","Alt"],["Space"," "," "," "," "],["AltRight Alt","Alt","Alt","Alt","Alt"],["ArrowLeft","←","←","←","←"],["ArrowDown","↓","↓","↓","↓"],["ArrowRight","→","→","→","→"],["ControlRight Control","Ctrl","Ctrl","Ctrl","Ctrl"]]];let s="",u=!1,d=!1;function f(e,t,n,a){let r=n?Number(localStorage.lang)+1:localStorage.lang;a&&(r=n?localStorage.lang:Number(localStorage.lang)+1),document.querySelector(`.${e}`).childNodes.forEach((e,n)=>{e.innerText=t[n][r]})}function p(e,t,l,p,h){switch(t.classList.add("active_key"),l){case"Backspace":s=h.start===h.end?e.value.slice(0,h.end-1):e.value.slice(0,h.start)+e.value.slice(h.end);break;case"Enter":s=e.value+"\n";break;case"Tab":s=e.value+"\t";break;case"CapsLock":d=!d;break;case"ShiftLeft":case"ShiftRight":"physical"===p&&(u=!0),"virtual"===p&&(u=!u);break;case"Space":s=e.value+" ";break;case"ControlLeft":case"ControlRight":case"AltLeft":case"AltRight":break;case"MetaLeft":localStorage.lang=localStorage.lang==n?a:n;break;default:"physical"===p&&(s=e.value+t.innerText),"virtual"===p&&(s=e.value+document.querySelector("."+l).innerText,u=!1,document.querySelectorAll(".Shift").forEach(e=>{e.classList.remove("active_key")}))}e.value=s,f("row1",r,u),f("row2",o,u,d),f("row3",i,u,d),f("row4",c,u,d)}void 0===localStorage.lang&&(localStorage.lang=n),window.onload=function(){let e=document.createElement("textarea"),t=document.createElement("div");document.body.append(e),document.body.append(t),e.className="text_area",t.className="keyboard",e.blur(),l.forEach((e,n)=>{let a=document.createElement("div");t.append(a),function(e,t,n){t.className=e+" row",n.forEach(e=>{let n=document.createElement("div");t.append(n),n.innerText=e[localStorage.lang],n.className=e[0]+" key"})}(`row${n+1}`,a,e)})},document.addEventListener("keydown",(function(e){let t=document.querySelector(".text_area"),n=document.querySelectorAll(".key");t.blur();let a={start:t.selectionStart,end:t.selectionEnd};n.forEach(n=>{if(n.className.includes(e.code)){let r=e.code;p(t,n,r,"physical",a)}})})),document.addEventListener("keyup",(function(e){document.querySelectorAll(".key").forEach(t=>{t.className.includes(e.code)&&t.classList.remove("active_key"),e.code.includes("Shift")&&(u=!1),e.code.includes("CapsLock")&&d&&t.querySelector(".CapsLock").classList.add("active_key")}),f("row1",r,u),f("row2",o,u,d),f("row3",i,u,d),f("row4",c,u,d)}));let h=document.querySelector("body");h.addEventListener("mousedown",(function(e){let t=document.querySelector(".text_area"),n=e.target.className.split(" ")[0];if(e.target.className.includes("key")&&"keyboard"!==e.target.className){let a="virtual",r={start:t.selectionStart,end:t.selectionEnd};p(t,e.target,n,a,r)}})),h.addEventListener("mouseup",(function(e){e.target.className.includes("key")&&"keyboard"!==e.target.className&&e.target.classList.remove("active_key"),u&&e.target.classList.add("active_key"),e.target.className.includes("CapsLock")&&d&&e.target.classList.add("active_key")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,